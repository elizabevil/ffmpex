package metadatax

const one uint64 = 1

// AVChannel
const (
	///< Invalid channel index
	AV_CHAN_NONE       = -1
	AV_CHAN_FRONT_LEFT = iota - 1
	AV_CHAN_FRONT_RIGHT
	AV_CHAN_FRONT_CENTER
	AV_CHAN_LOW_FREQUENCY
	AV_CHAN_BACK_LEFT
	AV_CHAN_BACK_RIGHT
	AV_CHAN_FRONT_LEFT_OF_CENTER
	AV_CHAN_FRONT_RIGHT_OF_CENTER
	AV_CHAN_BACK_CENTER
	AV_CHAN_SIDE_LEFT
	AV_CHAN_SIDE_RIGHT
	AV_CHAN_TOP_CENTER
	AV_CHAN_TOP_FRONT_LEFT
	AV_CHAN_TOP_FRONT_CENTER
	AV_CHAN_TOP_FRONT_RIGHT
	AV_CHAN_TOP_BACK_LEFT
	AV_CHAN_TOP_BACK_CENTER
	AV_CHAN_TOP_BACK_RIGHT
	/** Stereo downmix. */
	AV_CHAN_STEREO_LEFT = 29
	/** See above. */
	AV_CHAN_STEREO_RIGHT = iota + 10
	AV_CHAN_WIDE_LEFT
	AV_CHAN_WIDE_RIGHT
	AV_CHAN_SURROUND_DIRECT_LEFT
	AV_CHAN_SURROUND_DIRECT_RIGHT
	AV_CHAN_LOW_FREQUENCY_2
	AV_CHAN_TOP_SIDE_LEFT
	AV_CHAN_TOP_SIDE_RIGHT
	AV_CHAN_BOTTOM_FRONT_CENTER
	AV_CHAN_BOTTOM_FRONT_LEFT
	AV_CHAN_BOTTOM_FRONT_RIGHT

	/** Channel is empty can be safely skipped. */
	AV_CHAN_UNUSED = 0x200

	/** Channel contains data  but its position is unknown. */
	AV_CHAN_UNKNOWN = 0x300

	AV_CHAN_AMBISONIC_BASE = 0x400
	// leave space for 1024 ids, which correspond to maximum order-32 harmonics,
	// which should be enough for the foreseeable use cases
	AV_CHAN_AMBISONIC_END = 0x7ff
)

// AVChannelOrder
const (
	/**
	 * Only the channel count is specified, without any further information
	 * about the channel order.
	 */
	AV_CHANNEL_ORDER_UNSPEC = iota
	/**
	 * The native channel order  i.e. the channels are in the same order in
	 * which they are defined in the AVChannel enum. This supports up to 63
	 * different channels.
	 */
	AV_CHANNEL_ORDER_NATIVE
	/**
	 * The channel order does not correspond to any other predefined order and
	 * is stored as an explicit map. For example  this could be used to support
	 * layouts with 64 or more channels, or with empty/skipped (AV_CHAN_UNUSED)
	 * channels at arbitrary positions.
	 */
	AV_CHANNEL_ORDER_CUSTOM
	/**
	 * The audio is represented as the decomposition of the sound field into
	 * spherical harmonics. Each channel corresponds to a single expansion
	 * component. Channels are ordered according to ACN (Ambisonic Channel
	 * Number).
	 *
	 * The channel with the index n in the stream contains the spherical
	 * harmonic of degree l and order m given by
	 * @code{.unparsed}
	 *   l   = floor(sqrt(n)),
	 *   m   = n - l * (l + 1).
	 * @endcode
	 *
	 * Conversely given a spherical harmonic of degree l and order m, the
	 * corresponding channel index n is given by
	 * @code{.unparsed}
	 *   n = l * (l + 1) + m.
	 * @endcode
	 *
	 * Normalization is assumed to be SN3D (Schmidt Semi-Normalization)
	 * as defined in AmbiX format $ 2.1.
	 */
	AV_CHANNEL_ORDER_AMBISONIC
	/**
	 * Number of channel orders, not part of ABI/API
	 */
	FF_CHANNEL_ORDER_NB
)

// channel_masks Audio channel masks
const (
	AV_CH_FRONT_LEFT            = one << AV_CHAN_FRONT_LEFT
	AV_CH_FRONT_RIGHT           = one << AV_CHAN_FRONT_RIGHT
	AV_CH_FRONT_CENTER          = one << AV_CHAN_FRONT_CENTER
	AV_CH_LOW_FREQUENCY         = one << AV_CHAN_LOW_FREQUENCY
	AV_CH_BACK_LEFT             = one << AV_CHAN_BACK_LEFT
	AV_CH_BACK_RIGHT            = one << AV_CHAN_BACK_RIGHT
	AV_CH_FRONT_LEFT_OF_CENTER  = one << AV_CHAN_FRONT_LEFT_OF_CENTER
	AV_CH_FRONT_RIGHT_OF_CENTER = one << AV_CHAN_FRONT_RIGHT_OF_CENTER
	AV_CH_BACK_CENTER           = one << AV_CHAN_BACK_CENTER
	AV_CH_SIDE_LEFT             = one << AV_CHAN_SIDE_LEFT
	AV_CH_SIDE_RIGHT            = one << AV_CHAN_SIDE_RIGHT
	AV_CH_TOP_CENTER            = one << AV_CHAN_TOP_CENTER
	AV_CH_TOP_FRONT_LEFT        = one << AV_CHAN_TOP_FRONT_LEFT
	AV_CH_TOP_FRONT_CENTER      = one << AV_CHAN_TOP_FRONT_CENTER
	AV_CH_TOP_FRONT_RIGHT       = one << AV_CHAN_TOP_FRONT_RIGHT
	AV_CH_TOP_BACK_LEFT         = one << AV_CHAN_TOP_BACK_LEFT
	AV_CH_TOP_BACK_CENTER       = one << AV_CHAN_TOP_BACK_CENTER
	AV_CH_TOP_BACK_RIGHT        = one << AV_CHAN_TOP_BACK_RIGHT
	AV_CH_STEREO_LEFT           = one << AV_CHAN_STEREO_LEFT
	AV_CH_STEREO_RIGHT          = one << AV_CHAN_STEREO_RIGHT
	AV_CH_WIDE_LEFT             = one << AV_CHAN_WIDE_LEFT
	AV_CH_WIDE_RIGHT            = one << AV_CHAN_WIDE_RIGHT
	AV_CH_SURROUND_DIRECT_LEFT  = one << AV_CHAN_SURROUND_DIRECT_LEFT
	AV_CH_SURROUND_DIRECT_RIGHT = one << AV_CHAN_SURROUND_DIRECT_RIGHT
	AV_CH_LOW_FREQUENCY_2       = one << AV_CHAN_LOW_FREQUENCY_2
	AV_CH_TOP_SIDE_LEFT         = one << AV_CHAN_TOP_SIDE_LEFT
	AV_CH_TOP_SIDE_RIGHT        = one << AV_CHAN_TOP_SIDE_RIGHT
	AV_CH_BOTTOM_FRONT_CENTER   = one << AV_CHAN_BOTTOM_FRONT_CENTER
	AV_CH_BOTTOM_FRONT_LEFT     = one << AV_CHAN_BOTTOM_FRONT_LEFT
	AV_CH_BOTTOM_FRONT_RIGHT    = one << AV_CHAN_BOTTOM_FRONT_RIGHT
)

// channel_mask_c Audio channel layouts
const (
	AV_CH_LAYOUT_MONO               = (AV_CH_FRONT_CENTER)
	AV_CH_LAYOUT_STEREO             = (AV_CH_FRONT_LEFT | AV_CH_FRONT_RIGHT)
	AV_CH_LAYOUT_2POINT1            = (AV_CH_LAYOUT_STEREO | AV_CH_LOW_FREQUENCY)
	AV_CH_LAYOUT_2_1                = (AV_CH_LAYOUT_STEREO | AV_CH_BACK_CENTER)
	AV_CH_LAYOUT_SURROUND           = (AV_CH_LAYOUT_STEREO | AV_CH_FRONT_CENTER)
	AV_CH_LAYOUT_3POINT1            = (AV_CH_LAYOUT_SURROUND | AV_CH_LOW_FREQUENCY)
	AV_CH_LAYOUT_4POINT0            = (AV_CH_LAYOUT_SURROUND | AV_CH_BACK_CENTER)
	AV_CH_LAYOUT_4POINT1            = (AV_CH_LAYOUT_4POINT0 | AV_CH_LOW_FREQUENCY)
	AV_CH_LAYOUT_2_2                = (AV_CH_LAYOUT_STEREO | AV_CH_SIDE_LEFT | AV_CH_SIDE_RIGHT)
	AV_CH_LAYOUT_QUAD               = (AV_CH_LAYOUT_STEREO | AV_CH_BACK_LEFT | AV_CH_BACK_RIGHT)
	AV_CH_LAYOUT_5POINT0            = (AV_CH_LAYOUT_SURROUND | AV_CH_SIDE_LEFT | AV_CH_SIDE_RIGHT)
	AV_CH_LAYOUT_5POINT1            = (AV_CH_LAYOUT_5POINT0 | AV_CH_LOW_FREQUENCY)
	AV_CH_LAYOUT_5POINT0_BACK       = (AV_CH_LAYOUT_SURROUND | AV_CH_BACK_LEFT | AV_CH_BACK_RIGHT)
	AV_CH_LAYOUT_5POINT1_BACK       = (AV_CH_LAYOUT_5POINT0_BACK | AV_CH_LOW_FREQUENCY)
	AV_CH_LAYOUT_6POINT0            = (AV_CH_LAYOUT_5POINT0 | AV_CH_BACK_CENTER)
	AV_CH_LAYOUT_6POINT0_FRONT      = (AV_CH_LAYOUT_2_2 | AV_CH_FRONT_LEFT_OF_CENTER | AV_CH_FRONT_RIGHT_OF_CENTER)
	AV_CH_LAYOUT_HEXAGONAL          = (AV_CH_LAYOUT_5POINT0_BACK | AV_CH_BACK_CENTER)
	AV_CH_LAYOUT_3POINT1POINT2      = (AV_CH_LAYOUT_3POINT1 | AV_CH_TOP_FRONT_LEFT | AV_CH_TOP_FRONT_RIGHT)
	AV_CH_LAYOUT_6POINT1            = (AV_CH_LAYOUT_5POINT1 | AV_CH_BACK_CENTER)
	AV_CH_LAYOUT_6POINT1_BACK       = (AV_CH_LAYOUT_5POINT1_BACK | AV_CH_BACK_CENTER)
	AV_CH_LAYOUT_6POINT1_FRONT      = (AV_CH_LAYOUT_6POINT0_FRONT | AV_CH_LOW_FREQUENCY)
	AV_CH_LAYOUT_7POINT0            = (AV_CH_LAYOUT_5POINT0 | AV_CH_BACK_LEFT | AV_CH_BACK_RIGHT)
	AV_CH_LAYOUT_7POINT0_FRONT      = (AV_CH_LAYOUT_5POINT0 | AV_CH_FRONT_LEFT_OF_CENTER | AV_CH_FRONT_RIGHT_OF_CENTER)
	AV_CH_LAYOUT_7POINT1            = (AV_CH_LAYOUT_5POINT1 | AV_CH_BACK_LEFT | AV_CH_BACK_RIGHT)
	AV_CH_LAYOUT_7POINT1_WIDE       = (AV_CH_LAYOUT_5POINT1 | AV_CH_FRONT_LEFT_OF_CENTER | AV_CH_FRONT_RIGHT_OF_CENTER)
	AV_CH_LAYOUT_7POINT1_WIDE_BACK  = (AV_CH_LAYOUT_5POINT1_BACK | AV_CH_FRONT_LEFT_OF_CENTER | AV_CH_FRONT_RIGHT_OF_CENTER)
	AV_CH_LAYOUT_5POINT1POINT2_BACK = (AV_CH_LAYOUT_5POINT1_BACK | AV_CH_TOP_FRONT_LEFT | AV_CH_TOP_FRONT_RIGHT)
	AV_CH_LAYOUT_OCTAGONAL          = (AV_CH_LAYOUT_5POINT0 | AV_CH_BACK_LEFT | AV_CH_BACK_CENTER | AV_CH_BACK_RIGHT)
	AV_CH_LAYOUT_CUBE               = (AV_CH_LAYOUT_QUAD | AV_CH_TOP_FRONT_LEFT | AV_CH_TOP_FRONT_RIGHT | AV_CH_TOP_BACK_LEFT | AV_CH_TOP_BACK_RIGHT)
	AV_CH_LAYOUT_5POINT1POINT4_BACK = (AV_CH_LAYOUT_5POINT1POINT2_BACK | AV_CH_TOP_BACK_LEFT | AV_CH_TOP_BACK_RIGHT)
	AV_CH_LAYOUT_7POINT1POINT2      = (AV_CH_LAYOUT_7POINT1 | AV_CH_TOP_FRONT_LEFT | AV_CH_TOP_FRONT_RIGHT)
	AV_CH_LAYOUT_7POINT1POINT4_BACK = (AV_CH_LAYOUT_7POINT1POINT2 | AV_CH_TOP_BACK_LEFT | AV_CH_TOP_BACK_RIGHT)
	AV_CH_LAYOUT_7POINT2POINT3      = (AV_CH_LAYOUT_7POINT1POINT2 | AV_CH_TOP_BACK_CENTER | AV_CH_LOW_FREQUENCY_2)
	AV_CH_LAYOUT_9POINT1POINT4_BACK = (AV_CH_LAYOUT_7POINT1POINT4_BACK | AV_CH_FRONT_LEFT_OF_CENTER | AV_CH_FRONT_RIGHT_OF_CENTER)
	AV_CH_LAYOUT_HEXADECAGONAL      = (AV_CH_LAYOUT_OCTAGONAL | AV_CH_WIDE_LEFT | AV_CH_WIDE_RIGHT | AV_CH_TOP_BACK_LEFT | AV_CH_TOP_BACK_RIGHT | AV_CH_TOP_BACK_CENTER | AV_CH_TOP_FRONT_CENTER | AV_CH_TOP_FRONT_LEFT | AV_CH_TOP_FRONT_RIGHT)
	AV_CH_LAYOUT_STEREO_DOWNMIX     = (AV_CH_STEREO_LEFT | AV_CH_STEREO_RIGHT)
	AV_CH_LAYOUT_22POINT2           = (AV_CH_LAYOUT_7POINT1POINT4_BACK | AV_CH_FRONT_LEFT_OF_CENTER | AV_CH_FRONT_RIGHT_OF_CENTER | AV_CH_BACK_CENTER | AV_CH_LOW_FREQUENCY_2 | AV_CH_TOP_FRONT_CENTER | AV_CH_TOP_CENTER | AV_CH_TOP_SIDE_LEFT | AV_CH_TOP_SIDE_RIGHT | AV_CH_TOP_BACK_CENTER | AV_CH_BOTTOM_FRONT_CENTER | AV_CH_BOTTOM_FRONT_LEFT | AV_CH_BOTTOM_FRONT_RIGHT)
	AV_CH_LAYOUT_7POINT1_TOP_BACK   = AV_CH_LAYOUT_5POINT1POINT2_BACK
)

// AV_CHANNEL_LAYOUT_MASK Macro to define native channel layouts
type AV_CHANNEL_LAYOUT_MASK struct {
	order      int    `json:"order"`
	NbChannels int    `json:"nb"`
	Mask       uint64 `json:"mask"`
}

var (
	AV_CHANNEL_LAYOUT_MONO               = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 1, AV_CH_LAYOUT_MONO}
	AV_CHANNEL_LAYOUT_STEREO             = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 2, AV_CH_LAYOUT_STEREO}
	AV_CHANNEL_LAYOUT_2POINT1            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 3, AV_CH_LAYOUT_2POINT1}
	AV_CHANNEL_LAYOUT_2_1                = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 3, AV_CH_LAYOUT_2_1}
	AV_CHANNEL_LAYOUT_SURROUND           = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 3, AV_CH_LAYOUT_SURROUND}
	AV_CHANNEL_LAYOUT_3POINT1            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 4, AV_CH_LAYOUT_3POINT1}
	AV_CHANNEL_LAYOUT_4POINT0            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 4, AV_CH_LAYOUT_4POINT0}
	AV_CHANNEL_LAYOUT_4POINT1            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 5, AV_CH_LAYOUT_4POINT1}
	AV_CHANNEL_LAYOUT_2_2                = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 4, AV_CH_LAYOUT_2_2}
	AV_CHANNEL_LAYOUT_QUAD               = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 4, AV_CH_LAYOUT_QUAD}
	AV_CHANNEL_LAYOUT_5POINT0            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 5, AV_CH_LAYOUT_5POINT0}
	AV_CHANNEL_LAYOUT_5POINT1            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 6, AV_CH_LAYOUT_5POINT1}
	AV_CHANNEL_LAYOUT_5POINT0_BACK       = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 5, AV_CH_LAYOUT_5POINT0_BACK}
	AV_CHANNEL_LAYOUT_5POINT1_BACK       = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 6, AV_CH_LAYOUT_5POINT1_BACK}
	AV_CHANNEL_LAYOUT_6POINT0            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 6, AV_CH_LAYOUT_6POINT0}
	AV_CHANNEL_LAYOUT_6POINT0_FRONT      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 6, AV_CH_LAYOUT_6POINT0_FRONT}
	AV_CHANNEL_LAYOUT_3POINT1POINT2      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 6, AV_CH_LAYOUT_3POINT1POINT2}
	AV_CHANNEL_LAYOUT_HEXAGONAL          = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 6, AV_CH_LAYOUT_HEXAGONAL}
	AV_CHANNEL_LAYOUT_6POINT1            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 7, AV_CH_LAYOUT_6POINT1}
	AV_CHANNEL_LAYOUT_6POINT1_BACK       = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 7, AV_CH_LAYOUT_6POINT1_BACK}
	AV_CHANNEL_LAYOUT_6POINT1_FRONT      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 7, AV_CH_LAYOUT_6POINT1_FRONT}
	AV_CHANNEL_LAYOUT_7POINT0            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 7, AV_CH_LAYOUT_7POINT0}
	AV_CHANNEL_LAYOUT_7POINT0_FRONT      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 7, AV_CH_LAYOUT_7POINT0_FRONT}
	AV_CHANNEL_LAYOUT_7POINT1            = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 8, AV_CH_LAYOUT_7POINT1}
	AV_CHANNEL_LAYOUT_7POINT1_WIDE       = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 8, AV_CH_LAYOUT_7POINT1_WIDE}
	AV_CHANNEL_LAYOUT_7POINT1_WIDE_BACK  = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 8, AV_CH_LAYOUT_7POINT1_WIDE_BACK}
	AV_CHANNEL_LAYOUT_5POINT1POINT2_BACK = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 8, AV_CH_LAYOUT_5POINT1POINT2_BACK}
	AV_CHANNEL_LAYOUT_OCTAGONAL          = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 8, AV_CH_LAYOUT_OCTAGONAL}
	AV_CHANNEL_LAYOUT_CUBE               = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 8, AV_CH_LAYOUT_CUBE}
	AV_CHANNEL_LAYOUT_5POINT1POINT4_BACK = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 10, AV_CH_LAYOUT_5POINT1POINT4_BACK}
	AV_CHANNEL_LAYOUT_7POINT1POINT2      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 10, AV_CH_LAYOUT_7POINT1POINT2}
	AV_CHANNEL_LAYOUT_7POINT1POINT4_BACK = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 12, AV_CH_LAYOUT_7POINT1POINT4_BACK}
	AV_CHANNEL_LAYOUT_7POINT2POINT3      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 12, AV_CH_LAYOUT_7POINT2POINT3}
	AV_CHANNEL_LAYOUT_9POINT1POINT4_BACK = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 14, AV_CH_LAYOUT_9POINT1POINT4_BACK}
	AV_CHANNEL_LAYOUT_HEXADECAGONAL      = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 16, AV_CH_LAYOUT_HEXADECAGONAL}
	AV_CHANNEL_LAYOUT_STEREO_DOWNMIX     = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 2, AV_CH_LAYOUT_STEREO_DOWNMIX}
	AV_CHANNEL_LAYOUT_22POINT2           = AV_CHANNEL_LAYOUT_MASK{AV_CHANNEL_ORDER_NATIVE, 24, AV_CH_LAYOUT_22POINT2}
	AV_CHANNEL_LAYOUT_7POINT1_TOP_BACK   = AV_CHANNEL_LAYOUT_5POINT1POINT2_BACK
)

type ChannelName struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

// ChannelNames channel_layout_name
var ChannelNames = map[uint64]ChannelName{
	AV_CHAN_FRONT_LEFT:            ChannelName{"FL", "front left"},
	AV_CHAN_FRONT_RIGHT:           ChannelName{"FR", "front right"},
	AV_CHAN_FRONT_CENTER:          ChannelName{"FC", "front center"},
	AV_CHAN_LOW_FREQUENCY:         ChannelName{"LFE", "low frequency"},
	AV_CHAN_BACK_LEFT:             ChannelName{"BL", "back left"},
	AV_CHAN_BACK_RIGHT:            ChannelName{"BR", "back right"},
	AV_CHAN_FRONT_LEFT_OF_CENTER:  ChannelName{"FLC", "front left-of-center"},
	AV_CHAN_FRONT_RIGHT_OF_CENTER: ChannelName{"FRC", "front right-of-center"},
	AV_CHAN_BACK_CENTER:           ChannelName{"BC", "back center"},
	AV_CHAN_SIDE_LEFT:             ChannelName{"SL", "side left"},
	AV_CHAN_SIDE_RIGHT:            ChannelName{"SR", "side right"},
	AV_CHAN_TOP_CENTER:            ChannelName{"TC", "top center"},
	AV_CHAN_TOP_FRONT_LEFT:        ChannelName{"TFL", "top front left"},
	AV_CHAN_TOP_FRONT_CENTER:      ChannelName{"TFC", "top front center"},
	AV_CHAN_TOP_FRONT_RIGHT:       ChannelName{"TFR", "top front right"},
	AV_CHAN_TOP_BACK_LEFT:         ChannelName{"TBL", "top back left"},
	AV_CHAN_TOP_BACK_CENTER:       ChannelName{"TBC", "top back center"},
	AV_CHAN_TOP_BACK_RIGHT:        ChannelName{"TBR", "top back right"},
	AV_CHAN_STEREO_LEFT:           ChannelName{"DL", "downmix left"},
	AV_CHAN_STEREO_RIGHT:          ChannelName{"DR", "downmix right"},
	AV_CHAN_WIDE_LEFT:             ChannelName{"WL", "wide left"},
	AV_CHAN_WIDE_RIGHT:            ChannelName{"WR", "wide right"},
	AV_CHAN_SURROUND_DIRECT_LEFT:  ChannelName{"SDL", "surround direct left"},
	AV_CHAN_SURROUND_DIRECT_RIGHT: ChannelName{"SDR", "surround direct right"},
	AV_CHAN_LOW_FREQUENCY_2:       ChannelName{"LFE2", "low frequency 2"},
	AV_CHAN_TOP_SIDE_LEFT:         ChannelName{"TSL", "top side left"},
	AV_CHAN_TOP_SIDE_RIGHT:        ChannelName{"TSR", "top side right"},
	AV_CHAN_BOTTOM_FRONT_CENTER:   ChannelName{"BFC", "bottom front center"},
	AV_CHAN_BOTTOM_FRONT_LEFT:     ChannelName{"BFL", "bottom front left"},
	AV_CHAN_BOTTOM_FRONT_RIGHT:    ChannelName{"BFR", "bottom front right"},
}

type ChannelLayoutName struct {
	Name   string                 `json:"name"`
	Layout AV_CHANNEL_LAYOUT_MASK `json:"layout"`
}

// ChannelLayoutMap Common pre-defined channel layouts
var ChannelLayoutMap = map[string]ChannelLayoutName{
	"mono":           {"mono", AV_CHANNEL_LAYOUT_MONO},
	"stereo":         {"stereo", AV_CHANNEL_LAYOUT_STEREO},
	"2.1":            {"2.1", AV_CHANNEL_LAYOUT_2POINT1},
	"3.0":            {"3.0", AV_CHANNEL_LAYOUT_SURROUND},
	"3.0(back)":      {"3.0(back)", AV_CHANNEL_LAYOUT_2_1},
	"4.0":            {"4.0", AV_CHANNEL_LAYOUT_4POINT0},
	"quad":           {"quad", AV_CHANNEL_LAYOUT_QUAD},
	"quad(side)":     {"quad(side)", AV_CHANNEL_LAYOUT_2_2},
	"3.1":            {"3.1", AV_CHANNEL_LAYOUT_3POINT1},
	"5.0":            {"5.0", AV_CHANNEL_LAYOUT_5POINT0_BACK},
	"5.0(side)":      {"5.0(side)", AV_CHANNEL_LAYOUT_5POINT0},
	"4.1":            {"4.1", AV_CHANNEL_LAYOUT_4POINT1},
	"5.1":            {"5.1", AV_CHANNEL_LAYOUT_5POINT1_BACK},
	"5.1(side)":      {"5.1(side)", AV_CHANNEL_LAYOUT_5POINT1},
	"6.0":            {"6.0", AV_CHANNEL_LAYOUT_6POINT0},
	"6.0(front)":     {"6.0(front)", AV_CHANNEL_LAYOUT_6POINT0_FRONT},
	"3.1.2":          {"3.1.2", AV_CHANNEL_LAYOUT_3POINT1POINT2},
	"hexagonal":      {"hexagonal", AV_CHANNEL_LAYOUT_HEXAGONAL},
	"6.1":            {"6.1", AV_CHANNEL_LAYOUT_6POINT1},
	"6.1(back)":      {"6.1(back)", AV_CHANNEL_LAYOUT_6POINT1_BACK},
	"6.1(front)":     {"6.1(front)", AV_CHANNEL_LAYOUT_6POINT1_FRONT},
	"7.0":            {"7.0", AV_CHANNEL_LAYOUT_7POINT0},
	"7.0(front)":     {"7.0(front)", AV_CHANNEL_LAYOUT_7POINT0_FRONT},
	"7.1":            {"7.1", AV_CHANNEL_LAYOUT_7POINT1},
	"7.1(wide)":      {"7.1(wide)", AV_CHANNEL_LAYOUT_7POINT1_WIDE_BACK},
	"7.1(wide-side)": {"7.1(wide-side)", AV_CHANNEL_LAYOUT_7POINT1_WIDE},
	"5.1.2":          {"5.1.2", AV_CHANNEL_LAYOUT_5POINT1POINT2_BACK},
	"octagonal":      {"octagonal", AV_CHANNEL_LAYOUT_OCTAGONAL},
	"cube":           {"cube", AV_CHANNEL_LAYOUT_CUBE},
	"5.1.4":          {"5.1.4", AV_CHANNEL_LAYOUT_5POINT1POINT4_BACK},
	"7.1.2":          {"7.1.2", AV_CHANNEL_LAYOUT_7POINT1POINT2},
	"7.1.4":          {"7.1.4", AV_CHANNEL_LAYOUT_7POINT1POINT4_BACK},
	"7.2.3":          {"7.2.3", AV_CHANNEL_LAYOUT_7POINT2POINT3},
	"9.1.4":          {"9.1.4", AV_CHANNEL_LAYOUT_9POINT1POINT4_BACK},
	"hexadecagonal":  {"hexadecagonal", AV_CHANNEL_LAYOUT_HEXADECAGONAL},
	"downmix":        {"downmix", AV_CHANNEL_LAYOUT_STEREO_DOWNMIX},
	"22.2":           {"22.2", AV_CHANNEL_LAYOUT_22POINT2},
}
